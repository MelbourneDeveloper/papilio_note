// Mocks generated by Mockito 5.2.0 from annotations
// in md/test/app_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i9;

import 'package:flutter/material.dart' as _i1;
import 'package:md/models/note_route_path.dart' as _i3;
import 'package:md/services/file_io/file_io_base.dart' as _i4;
import 'package:mockito/mockito.dart' as _i2;
import 'package:papilio/page_args.dart' as _i7;
import 'package:papilio/page_builder.dart' as _i8;
import 'package:papilio/papilio_router_delegate.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>> extends _i2.Fake
    implements _i1.GlobalKey<T> {}

class _FakeAppRouteInfo_1 extends _i2.Fake implements _i3.AppRouteInfo {}

class _FakeWidget_2 extends _i2.Fake implements _i1.Widget {
  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [FileIOBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileIOBase extends _i2.Mock implements _i4.FileIOBase {
  MockFileIOBase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.Future<dynamic> writeText(String? fileName, String? text) =>
      (super.noSuchMethod(Invocation.method(#writeText, [fileName, text]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<String?> readText(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#readText, [fileName]),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<dynamic> deleteFile(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#deleteFile, [fileName]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
}

/// A class which mocks [PapilioRouterDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockPapilioRouterDelegate extends _i2.Mock
    implements _i6.PapilioRouterDelegate<_i3.AppRouteInfo> {
  MockPapilioRouterDelegate() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(Invocation.getter(#navigatorKey),
              returnValue: _FakeGlobalKey_0<_i1.NavigatorState>())
          as _i1.GlobalKey<_i1.NavigatorState>);
  @override
  _i3.AppRouteInfo get currentConfiguration =>
      (super.noSuchMethod(Invocation.getter(#currentConfiguration),
          returnValue: _FakeAppRouteInfo_1()) as _i3.AppRouteInfo);
  @override
  List<_i1.Page<dynamic>> get pages =>
      (super.noSuchMethod(Invocation.getter(#pages),
          returnValue: <_i1.Page<dynamic>>[]) as List<_i1.Page<dynamic>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool pop(
          {_i1.Route<dynamic>? route,
          dynamic result,
          _i7.PageArgs? pageArgs,
          _i8.PageBuilder<dynamic>? pageBuilder}) =>
      (super.noSuchMethod(
          Invocation.method(#pop, [], {
            #route: route,
            #result: result,
            #pageArgs: pageArgs,
            #pageBuilder: pageBuilder
          }),
          returnValue: false) as bool);
  @override
  void navigate<TState>(_i1.ValueKey<String>? key,
          {Object? arguments, Object? pageScope}) =>
      super.noSuchMethod(
          Invocation.method(
              #navigate, [key], {#arguments: arguments, #pageScope: pageScope}),
          returnValueForMissingStub: null);
  @override
  _i1.Widget build(_i1.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_2()) as _i1.Widget);
  @override
  _i5.Future<void> setNewRoutePath(_i3.AppRouteInfo? configuration) =>
      (super.noSuchMethod(Invocation.method(#setNewRoutePath, [configuration]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> setInitialRoutePath(_i3.AppRouteInfo? configuration) =>
      (super.noSuchMethod(
          Invocation.method(#setInitialRoutePath, [configuration]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> setRestoredRoutePath(_i3.AppRouteInfo? configuration) =>
      (super.noSuchMethod(
          Invocation.method(#setRestoredRoutePath, [configuration]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> popRoute() =>
      (super.noSuchMethod(Invocation.method(#popRoute, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void addListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
